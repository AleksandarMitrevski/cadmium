package encrypt

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha256"
	"crypto/x509"
	"encoding/base64"
	"encoding/hex"
	"encoding/pem"
	"errors"
	"io"
	"log"
	"net/http"

	"golang.org/x/crypto/blowfish"
	"golang.org/x/crypto/twofish"
)

// RSAEncrypt - POST /rsa/encrypt
// Params:
// - key : the public key to use for encryption, generated by /rsa/key or respecting its constraints and format
// - data : non-empty string to be encrypted
// Returns:
// - encrypted text, encoded in base64
func RSAEncrypt(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()

	keyValues, ok := r.PostForm["key"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field key"))
		return
	}
	dataValues, ok := r.PostForm["data"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field data"))
		return
	}

	key, err := parseRSAPublicKey([]byte(keyValues[0]))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid key"))
		return
	}
	data := dataValues[0]
	if len(data) == 0 {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid data"))
		return
	}

	encryptedContent, err := rsaEncrypt(key, data)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Printf("RSAEncrypt can not encrypt data: %v", err.Error())
		return
	}

	w.Write([]byte(encryptedContent))
}

// RSADecrypt - POST /rsa/decrypt
// Params:
// - key : the private key to use for decryption
// - data : non-empty base64 string to be decrypted
// Returns:
// - decrypted plain text
func RSADecrypt(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()

	keyValues, ok := r.PostForm["key"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field key"))
		return
	}
	dataValues, ok := r.PostForm["data"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field data"))
		return
	}

	key, _, err := parseRSAPrivateKey([]byte(keyValues[0]))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid key"))
		return
	}
	data := dataValues[0]
	if len(data) == 0 {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid data"))
		return
	}

	decryptedContent, err := rsaDecrypt(key, data)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Printf("RSADecrypt can not decrypt data: %v", err.Error())
		return
	}

	w.Write([]byte(decryptedContent))
}

// AESEncrypt - POST /aes/encrypt
// Params:
// - key : the key to use for encryption, generated by /aes/key or respecting its constraints and format
// - data : non-empty string to be encrypted
// Returns:
// - encrypted text, encoded in base64
func AESEncrypt(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()

	keyValues, ok := r.PostForm["key"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field key"))
		return
	}
	dataValues, ok := r.PostForm["data"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field data"))
		return
	}

	key, err := parseKey(keyValues[0])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid key"))
		return
	}
	data := dataValues[0]
	if len(data) == 0 {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid data"))
		return
	}

	encryptedContent, err := aesEncrypt(key, data)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Printf("AESEncrypt can not encrypt data: %v", err.Error())
		return
	}

	w.Write([]byte(encryptedContent))
}

// AESDecrypt - POST /aes/decrypt
// Params:
// - key : the key to use for decryption
// - data : non-empty base64 string to be decrypted
// Returns:
// - decrypted plain text
func AESDecrypt(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()

	keyValues, ok := r.PostForm["key"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field key"))
		return
	}
	dataValues, ok := r.PostForm["data"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field data"))
		return
	}

	key, err := parseKey(keyValues[0])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid key"))
		return
	}
	data := dataValues[0]
	if len(data) == 0 {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid data"))
		return
	}

	decryptedContent, err := aesDecrypt(key, data)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Printf("AESDecrypt can not decrypt data: %v", err.Error())
		return
	}

	w.Write([]byte(decryptedContent))
}

// BlowfishEncrypt - POST /blowfish/encrypt
// Params:
// - key : the key to use for encryption, generated by /blowfish/key or respecting its constraints and format
// - data : non-empty string to be encrypted
// Returns:
// - encrypted text, encoded in base64
func BlowfishEncrypt(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()

	keyValues, ok := r.PostForm["key"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field key"))
		return
	}
	dataValues, ok := r.PostForm["data"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field data"))
		return
	}

	key, err := parseKey(keyValues[0])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid key"))
		return
	}
	data := dataValues[0]
	if len(data) == 0 {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid data"))
		return
	}

	encryptedContent, err := blowfishEncrypt(key, data)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Printf("BlowfishEncrypt can not encrypt data: %v", err.Error())
		return
	}

	w.Write([]byte(encryptedContent))
}

// BlowfishDecrypt - POST /blowfish/decrypt
// Params:
// - key : the key to use for decryption
// - data : non-empty base64 string to be decrypted
// Returns:
// - decrypted plain text
func BlowfishDecrypt(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()

	keyValues, ok := r.PostForm["key"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field key"))
		return
	}
	dataValues, ok := r.PostForm["data"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field data"))
		return
	}

	key, err := parseKey(keyValues[0])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid key"))
		return
	}
	data := dataValues[0]
	if len(data) == 0 {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid data"))
		return
	}

	decryptedContent, err := blowfishDecrypt(key, data)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Printf("BlowfishDecrypt can not decrypt data: %v", err.Error())
		return
	}

	w.Write([]byte(decryptedContent))
}

// TwofishEncrypt - POST /twofish/encrypt
// Params:
// - key : the key to use for encryption, generated by /twofish/key or respecting its constraints and format
// - data : non-empty string to be encrypted
// Returns:
// - encrypted text, encoded in base64
func TwofishEncrypt(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()

	keyValues, ok := r.PostForm["key"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field key"))
		return
	}
	dataValues, ok := r.PostForm["data"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field data"))
		return
	}

	key, err := parseKey(keyValues[0])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid key"))
		return
	}
	data := dataValues[0]
	if len(data) == 0 {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid data"))
		return
	}

	encryptedContent, err := twofishEncrypt(key, data)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Printf("TwofishEncrypt can not encrypt data: %v", err.Error())
		return
	}

	w.Write([]byte(encryptedContent))
}

// TwofishDecrypt - POST /twofish/decrypt
// Params:
// - key : the key to use for decryption
// - data : non-empty base64 string to be decrypted
// Returns:
// - decrypted plain text
func TwofishDecrypt(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()

	keyValues, ok := r.PostForm["key"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field key"))
		return
	}
	dataValues, ok := r.PostForm["data"]
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("missing field data"))
		return
	}

	key, err := parseKey(keyValues[0])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid key"))
		return
	}
	data := dataValues[0]
	if len(data) == 0 {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid data"))
		return
	}

	decryptedContent, err := twofishDecrypt(key, data)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Printf("TwofishDecrypt can not decrypt data: %v", err.Error())
		return
	}

	w.Write([]byte(decryptedContent))
}

func parseKey(key string) ([]byte, error) {
	return hex.DecodeString(key)
}

func parseRSAPrivateKey(key []byte) (*rsa.PrivateKey, []byte, error) {
	k, rest := pem.Decode(key)
	if k == nil {
		return nil, nil, errors.New("can not decode key")
	}
	pk, err := x509.ParsePKCS1PrivateKey(k.Bytes)
	if err != nil {
		return nil, nil, err
	}
	return pk, rest, nil
}

func parseRSAPublicKey(key []byte) (*rsa.PublicKey, error) {
	k, _ := pem.Decode(key)
	if k == nil {
		return nil, errors.New("can not decode key")
	}
	pubk, err := x509.ParsePKCS1PublicKey(k.Bytes)
	if err != nil {
		return nil, err
	}
	return pubk, nil
}

// https://github.com/brainattica/Golang-RSA-sample/blob/master/rsa_sample.go
func rsaEncrypt(key *rsa.PublicKey, data string) (string, error) {
	cipherText, err := rsa.EncryptOAEP(sha256.New(), rand.Reader, key, []byte(data), []byte(""))
	if err != nil {
		return "", err
	}
	return base64.StdEncoding.EncodeToString(cipherText), nil
}

func rsaDecrypt(key *rsa.PrivateKey, data string) (string, error) {
	cipherText, err := base64.StdEncoding.DecodeString(data)
	if err != nil {
		return "", err
	}
	plainText, err := rsa.DecryptOAEP(sha256.New(), rand.Reader, key, cipherText, []byte(""))
	if err != nil {
		return "", err
	}
	return string(plainText), nil
}

// https://gist.github.com/mickelsonm/e1bf365a149f3fe59119
func aesEncrypt(key []byte, data string) (string, error) {
	block, err := aes.NewCipher(key)
	if err != nil {
		return "", err
	}

	cipherText := make([]byte, aes.BlockSize+len(data))
	iv := cipherText[:aes.BlockSize]
	if _, err = io.ReadFull(rand.Reader, iv); err != nil {
		return "", err
	}
	stream := cipher.NewCFBEncrypter(block, iv)
	stream.XORKeyStream(cipherText[aes.BlockSize:], []byte(data))

	return base64.StdEncoding.EncodeToString(cipherText), nil
}

func aesDecrypt(key []byte, data string) (string, error) {
	cipherText, err := base64.StdEncoding.DecodeString(data)
	if err != nil {
		return "", err
	}

	block, err := aes.NewCipher(key)
	if err != nil {
		return "", err
	}

	if len(cipherText) < aes.BlockSize {
		return "", errors.New("ciphertext block size is too short")
	}

	iv := cipherText[:aes.BlockSize]
	cipherText = cipherText[aes.BlockSize:]
	stream := cipher.NewCFBDecrypter(block, iv)
	stream.XORKeyStream(cipherText, cipherText)

	return string(cipherText), nil
}

// https://github.com/ipfans/golang-sample/blob/master/blowfish.go
func blowfishEncrypt(key []byte, data string) (string, error) {
	dataBytes := []byte(data)

	// pad data if needed
	if remainder := len(data) % blowfish.BlockSize; remainder != 0 {
		padding := blowfish.BlockSize - remainder
		dataBytes = make([]byte, len(data), len(data)+padding)
		copy(dataBytes, []byte(data))
		for i := 0; i < padding; i++ {
			dataBytes = append(dataBytes, 0)
		}
	}

	block, err := blowfish.NewCipher(key)
	if err != nil {
		return "", err
	}

	cipherText := make([]byte, blowfish.BlockSize+len(dataBytes))
	iv := cipherText[:blowfish.BlockSize]
	stream := cipher.NewCBCEncrypter(block, iv)
	stream.CryptBlocks(cipherText[blowfish.BlockSize:], dataBytes)

	return base64.StdEncoding.EncodeToString(cipherText), nil
}

func blowfishDecrypt(key []byte, data string) (string, error) {
	cipherText, err := base64.StdEncoding.DecodeString(data)
	if err != nil {
		return "", err
	}

	block, err := blowfish.NewCipher(key)
	if err != nil {
		return "", err
	}

	iv := cipherText[:blowfish.BlockSize]
	cipherText = cipherText[blowfish.BlockSize:]
	if len(cipherText)%blowfish.BlockSize != 0 {
		return "", errors.New("ciphertext is not a multiple of blowfish.BlockSize")
	}
	stream := cipher.NewCBCDecrypter(block, iv)
	stream.CryptBlocks(cipherText, cipherText)

	cipherText = bytes.TrimRight(cipherText, "\x00") // remove any added padding
	return string(cipherText), nil
}

func twofishEncrypt(key []byte, data string) (string, error) {
	dataBytes := []byte(data)

	// pad data if needed
	if remainder := len(data) % twofish.BlockSize; remainder != 0 {
		padding := twofish.BlockSize - remainder
		dataBytes = make([]byte, len(data), len(data)+padding)
		copy(dataBytes, []byte(data))
		for i := 0; i < padding; i++ {
			dataBytes = append(dataBytes, 0)
		}
	}

	block, err := twofish.NewCipher(key)
	if err != nil {
		return "", err
	}

	cipherText := make([]byte, twofish.BlockSize+len(dataBytes))
	iv := cipherText[:twofish.BlockSize]
	stream := cipher.NewCBCEncrypter(block, iv)
	stream.CryptBlocks(cipherText[twofish.BlockSize:], dataBytes)

	return base64.StdEncoding.EncodeToString(cipherText), nil
}

func twofishDecrypt(key []byte, data string) (string, error) {
	cipherText, err := base64.StdEncoding.DecodeString(data)
	if err != nil {
		return "", err
	}

	block, err := twofish.NewCipher(key)
	if err != nil {
		return "", err
	}

	iv := cipherText[:twofish.BlockSize]
	cipherText = cipherText[twofish.BlockSize:]
	if len(cipherText)%twofish.BlockSize != 0 {
		return "", errors.New("ciphertext is not a multiple of twofish.BlockSize")
	}
	stream := cipher.NewCBCDecrypter(block, iv)
	stream.CryptBlocks(cipherText, cipherText)

	cipherText = bytes.TrimRight(cipherText, "\x00") // remove any added padding
	return string(cipherText), nil
}
